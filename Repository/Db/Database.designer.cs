#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Repository.Db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pharmacy")]
	public partial class DbContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertMedicines(Medicines instance);
    partial void UpdateMedicines(Medicines instance);
    partial void DeleteMedicines(Medicines instance);
    partial void InsertOrders(Orders instance);
    partial void UpdateOrders(Orders instance);
    partial void DeleteOrders(Orders instance);
    partial void InsertOrderedMedicines(OrderedMedicines instance);
    partial void UpdateOrderedMedicines(OrderedMedicines instance);
    partial void DeleteOrderedMedicines(OrderedMedicines instance);
    #endregion
		
		public DbContext() : 
				base(global::Repository.Properties.Settings.Default.pharmacyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Medicines> Medicines
		{
			get
			{
				return this.GetTable<Medicines>();
			}
		}
		
		public System.Data.Linq.Table<Orders> Orders
		{
			get
			{
				return this.GetTable<Orders>();
			}
		}
		
		public System.Data.Linq.Table<OrderedMedicines> OrderedMedicines
		{
			get
			{
				return this.GetTable<OrderedMedicines>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicines")]
	public partial class Medicines : Db.IDbEntity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ProductForm;
		
		private string _Manufacturer;
		
		private byte _Recipe;
		
		private decimal _Price;
		
		private byte _Available;
		
		private EntitySet<OrderedMedicines> _OrderedMedicines;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProductFormChanging(string value);
    partial void OnProductFormChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnRecipeChanging(byte value);
    partial void OnRecipeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnAvailableChanging(byte value);
    partial void OnAvailableChanged();
    #endregion
		
		public Medicines()
		{
			this._OrderedMedicines = new EntitySet<OrderedMedicines>(new Action<OrderedMedicines>(this.attach_OrderedMedicines), new Action<OrderedMedicines>(this.detach_OrderedMedicines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductForm", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ProductForm
		{
			get
			{
				return this._ProductForm;
			}
			set
			{
				if ((this._ProductForm != value))
				{
					this.OnProductFormChanging(value);
					this.SendPropertyChanging();
					this._ProductForm = value;
					this.SendPropertyChanged("ProductForm");
					this.OnProductFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recipe", DbType="TinyInt NOT NULL")]
		public byte Recipe
		{
			get
			{
				return this._Recipe;
			}
			set
			{
				if ((this._Recipe != value))
				{
					this.OnRecipeChanging(value);
					this.SendPropertyChanging();
					this._Recipe = value;
					this.SendPropertyChanged("Recipe");
					this.OnRecipeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="TinyInt NOT NULL")]
		public byte Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicines_OrderedMedicines", Storage="_OrderedMedicines", ThisKey="Id", OtherKey="Medicine_Id")]
		public EntitySet<OrderedMedicines> OrderedMedicines
		{
			get
			{
				return this._OrderedMedicines;
			}
			set
			{
				this._OrderedMedicines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderedMedicines(OrderedMedicines entity)
		{
			this.SendPropertyChanging();
			entity.Medicines = this;
		}
		
		private void detach_OrderedMedicines(OrderedMedicines entity)
		{
			this.SendPropertyChanging();
			entity.Medicines = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Orders : Db.IDbEntity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private string _E_mail;
		
		private string _PhoneNumber;
		
		private string _State;
		
		private EntitySet<OrderedMedicines> _OrderedMedicines;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public Orders()
		{
			this._OrderedMedicines = new EntitySet<OrderedMedicines>(new Action<OrderedMedicines>(this.attach_OrderedMedicines), new Action<OrderedMedicines>(this.detach_OrderedMedicines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E-mail]", Storage="_E_mail", DbType="NVarChar(50)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_OrderedMedicines", Storage="_OrderedMedicines", ThisKey="Id", OtherKey="Order_Id")]
		public EntitySet<OrderedMedicines> OrderedMedicines
		{
			get
			{
				return this._OrderedMedicines;
			}
			set
			{
				this._OrderedMedicines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderedMedicines(OrderedMedicines entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_OrderedMedicines(OrderedMedicines entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}

        private System.Data.Linq.EntitySet<Medicines> _medicines;
        public System.Data.Linq.EntitySet<Medicines> Medicines
        {
            get
            {
                if (_medicines == null)
                {
                    _medicines = new System.Data.Linq.EntitySet<Medicines>(OnMedicinesAdd, OnMedicinesRemove);
                    _medicines.SetSource(OrderedMedicines.Select(c => c.Medicines));
                }
                return _medicines;
            }
            set
            {
                _medicines.Assign(value);
            }
        }

        //[System.Diagnostics.DebuggerNonUserCode]
        private void OnMedicinesAdd(Medicines entity)
        {
            this.OrderedMedicines.Add(new OrderedMedicines { Orders = this, Medicines = entity });
            SendPropertyChanged(null);
        }

        //[System.Diagnostics.DebuggerNonUserCode]
        private void OnMedicinesRemove(Medicines entity)
        {
            var orderedMedicines = this.OrderedMedicines.FirstOrDefault(
                c => c.Order_Id == Id
                && c.Medicine_Id == entity.Id);
            this.OrderedMedicines.Remove(orderedMedicines);
            SendPropertyChanged(null);
        }
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderedMedicines")]
	public partial class OrderedMedicines : Db.IDbEntity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Order_Id;
		
		private int _Medicine_Id;
		
		private EntityRef<Medicines> _Medicines;
		
		private EntityRef<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrder_IdChanging(int value);
    partial void OnOrder_IdChanged();
    partial void OnMedicine_IdChanging(int value);
    partial void OnMedicine_IdChanged();
    #endregion
		
		public OrderedMedicines()
		{
			this._Medicines = default(EntityRef<Medicines>);
			this._Orders = default(EntityRef<Orders>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Id", DbType="Int NOT NULL")]
		public int Order_Id
		{
			get
			{
				return this._Order_Id;
			}
			set
			{
				if ((this._Order_Id != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Id = value;
					this.SendPropertyChanged("Order_Id");
					this.OnOrder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Id", DbType="Int NOT NULL")]
		public int Medicine_Id
		{
			get
			{
				return this._Medicine_Id;
			}
			set
			{
				if ((this._Medicine_Id != value))
				{
					if (this._Medicines.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicine_IdChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Id = value;
					this.SendPropertyChanged("Medicine_Id");
					this.OnMedicine_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicines_OrderedMedicines", Storage="_Medicines", ThisKey="Medicine_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Medicines Medicines
		{
			get
			{
				return this._Medicines.Entity;
			}
			set
			{
				Medicines previousValue = this._Medicines.Entity;
				if (((previousValue != value) 
							|| (this._Medicines.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicines.Entity = null;
						previousValue.OrderedMedicines.Remove(this);
					}
					this._Medicines.Entity = value;
					if ((value != null))
					{
						value.OrderedMedicines.Add(this);
						this._Medicine_Id = value.Id;
					}
					else
					{
						this._Medicine_Id = default(int);
					}
					this.SendPropertyChanged("Medicines");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_OrderedMedicines", Storage="_Orders", ThisKey="Order_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.OrderedMedicines.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.OrderedMedicines.Add(this);
						this._Order_Id = value.Id;
					}
					else
					{
						this._Order_Id = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
